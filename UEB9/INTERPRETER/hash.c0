/* Hash table implementation (separate chaining) */

#use <conio>

/* separate chaining maintains a list in each bucket */
struct list {
  entry        elem;    /* an entry in the chain */
  struct list* next;    /* next entry in chain */
};
typedef struct list* list;

/* the hash table itself */
struct ht {
  int    capacity;      /* hash table capacity */
  list[] buckets;       /* array of chains (or: "buckets") */
                        /* invariant: \length(buckets) == capacity */
};


/* check whether all entries in chain share the common hash value i */
bool is_chain(list chain, int i, int c) {
  for (; chain != NULL; chain = chain->next)
    if (hash(entry_key(chain->elem)) % c != i)
      return false;

  return true;
}

/* check whether ht is a valid hash table (all entries must be chains) */
bool is_ht(ht h)
/*@ requires h != NULL; @*/    
/*@ requires h->capacity > 0 && \length(h->buckets) == h->capacity; @*/   
{
  for (int i = 0; i < h->capacity; i++)
    if (!is_chain(h->buckets[i], i, h->capacity))
      return false;

  return true;
}


/* create a new hash table with capacity c */
ht ht_new(int c)
/*@ requires c > 0; @*/    
/*@ ensures  is_ht(\result); @*/
{
  ht h = alloc(struct ht);

  h->capacity = c;
  h->buckets = alloc_array(list, c);

  return h;
}

/* search for entry with key k in hash table ht
   (returns NULL if key k not present in table)
*/
entry ht_search(ht h, key k)
/*@ requires is_ht(h); @*/
/*@ ensures is_ht(h); @*/
{
  int b = hash(k) % h->capacity;

  for (list chain = h->buckets[b]; chain != NULL; chain = chain->next)
    if (key_equal(entry_key(chain->elem), k))
      return chain->elem;

  return NULL;
}

/* insert new entry e into hash table ht
 */
void ht_insert(ht h, entry e)
/*@ requires is_ht(h);  @*/
/*@ requires e != NULL; @*/
/*@ ensures  is_ht(h);  @*/
{
  list head = alloc(struct list);

  key k = entry_key(e);
  int b = hash(k) % h->capacity;

  head->elem = e;
  head->next = h->buckets[b];
  h->buckets[b] = head;
}

/* debugging only: print hash table */
void printht(ht h)
/*@ requires is_ht(h); @*/
{
  list l;

  for (int i = 0; i < h->capacity; i++) {
    printf("%d\t| ", i);

    l = h->buckets[i];
    printchar('[');
    if (l != NULL) {
      print(entry_string(l->elem));
      for (l = l->next; l != NULL; l = l->next) {
        printchar(',');
        print(entry_string(l->elem));
      }
    }
    println("]");
  }
}
