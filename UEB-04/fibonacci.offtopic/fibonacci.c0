#use <conio>
#use <dub>

dub fibonacci_worker(int i, dub[] cache) {
    if (i == 1 || i == 0) 
        return itod(i);
    else if (i < 0)
        return itod(0);
    else if (dtoi(cache[0]) >= i)
        return cache[i+1];
    else {
        cache[i+1] = dadd(fibonacci_worker(i - 2, cache), fibonacci_worker(i - 1, cache));
        cache[0] = dtoi(cache[0]) > i ? cache[0] : itod(i);
        return cache[i+1];
    }
}

dub fibonacci(int i) {
    dub[] cache = alloc_array(dub, i+2);
    return fibonacci_worker(i, cache);
}

int main() {
    for (int i = 0; i < 1000; i++) {
        print_dub(fibonacci(i));
    }
    return 0;
}