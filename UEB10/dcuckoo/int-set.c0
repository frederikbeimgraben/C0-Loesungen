#use "hash-int.c0"
#use <dcuckoo>
#use <rand>

int benchmark(int c, int d, int load) {
    ht h = ht_new(c, d);

    rand_t gen = init_rand(42);

    int fails = 0;

    for (int i = 0; i < load; i++) {
        entry e = alloc(int);
        *e = rand(gen) % 10001;
        fails += ht_insert(h, e) ? 0 : 1;
    }

    return fails;
}

void wrap_benchmark(int c, int d, int load) {
    int fail = benchmark(c, d, load);

    int fail_rate = (fail * 100) / load;
    printf(
        "[c = %d, d = %d, load = %d]\n",
        c,
        d,
        load
    );
    printf(
        "\tFail rate: %d / %d (%d %c)\n",
        fail,
        load,
        fail_rate,
        '%'
    );
}

int main() {
    println("Test cuckoo hash table:");

    /* create cuckoo hash table */
    ht tab = ht_new(11,  8);

    /* sample elements to insert */
    int[] xs = alloc_array(int, 11);
    xs[0] =  20; xs[1] =  50; xs[2] =  53; xs[3] =  75;
    xs[4] = 100; xs[5] =  67; xs[6] = 105; xs[7] =   3;
    xs[8] =  36; xs[9] =  39;
    /* /!\ inserting 6 will fail (cycle in ht_insert) */
    xs[10] = 39;

    /* attempt to insert entries in xs into tab */
    for (int i = 0; i < 11; i++) {
        entry e = alloc(int);
        *e = xs[i];
        if (! ht_insert(tab, e)) {
            printf("failed to insert entry %s\n", entry_string(e));
            return 1;
        }
    }

    /* success, print resulting hash table */
    printht(tab);

    println("Benchmark:");

    wrap_benchmark(10, 8, 64);
    wrap_benchmark(20, 4, 64);
    wrap_benchmark(40, 2, 64);
    wrap_benchmark(80, 1, 64);

    /*
        [c = 10, d = 8, load = 64]
            Fail rate: 3 / 64 (4 %)
        [c = 20, d = 4, load = 64]
                Fail rate: 7 / 64 (10 %)
        [c = 40, d = 2, load = 64]
                Fail rate: 11 / 64 (17 %)
        [c = 80, d = 1, load = 64]
                Fail rate: 17 / 64 (26 %)

        Die Ergebnisse zeigen eindeutig, dass mit sinkender Anzahl an Layers die
        Fail-Rate steigt.
        Der Grund dafür ist, dass mit sinkender Layer-Tiefe weniger häufig 
        pro Layer eingefügt werden kann. Wenn die Hash/Random-Funktion also 
        Häufungen hat bzw. die Elemente nicht vollkommen gleichmäßig über 
        die Buckets verteilt sind, entstehen mit sinkender Tiefe mehr Fehler.
    */

    return 0;
}
